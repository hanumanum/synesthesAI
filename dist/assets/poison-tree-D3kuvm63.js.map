{"version":3,"file":"poison-tree-D3kuvm63.js","sources":["../../src/sketches/poison-tree.ts"],"sourcesContent":["import p5 from 'p5';\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n  hue: number;\n  brightness: number;\n  life: number;\n  type: 'anger' | 'growth' | 'poison';\n}\n\ninterface Wave {\n  x: number;\n  y: number;\n  radius: number;\n  speed: number;\n  hue: number;\n  intensity: number;\n}\n\nconst sketch = (p: p5) => {\n  let particles: Particle[] = [];\n  let waves: Wave[] = [];\n  let time = 0;\n  let canvasWidth: number;\n  let canvasHeight: number;\n  let centerX: number;\n  let centerY: number;\n\n  p.setup = () => {\n    const canvas = p.createCanvas(p.windowWidth, p.windowHeight);\n    canvas.parent('sketch-container');\n    p.colorMode(p.HSB, 360, 100, 100, 1);\n    p.blendMode(p.SCREEN);\n    \n    canvasWidth = p.width;\n    canvasHeight = p.height;\n    centerX = canvasWidth / 2;\n    centerY = canvasHeight / 2;\n    \n    // Create initial particles\n    for (let i = 0; i < 200; i++) {\n      addParticle();\n    }\n    \n    // Create initial waves\n    for (let i = 0; i < 5; i++) {\n      addWave();\n    }\n  };\n\n  function addParticle() {\n    const angle = p.random(p.TWO_PI);\n    const distance = p.random(0, 300);\n    const x = centerX + p.cos(angle) * distance;\n    const y = centerY + p.sin(angle) * distance;\n    \n    const types: ('anger' | 'growth' | 'poison')[] = ['anger', 'growth', 'poison'];\n    const type = types[Math.floor(p.random(3))];\n    \n    let hue, speed;\n    switch(type) {\n      case 'anger':\n        hue = p.random(0, 30); // Red-orange\n        speed = p.random(2, 4);\n        break;\n      case 'growth':\n        hue = p.random(60, 120); // Yellow-green\n        speed = p.random(1, 3);\n        break;\n      case 'poison':\n        hue = p.random(270, 320); // Purple-magenta\n        speed = p.random(1.5, 3.5);\n        break;\n    }\n    \n    particles.push({\n      x: x,\n      y: y,\n      vx: p.cos(angle) * speed,\n      vy: p.sin(angle) * speed,\n      size: p.random(3, 12),\n      hue: hue,\n      brightness: p.random(70, 100),\n      life: 1.0,\n      type: type\n    });\n  }\n\n  function addWave() {\n    waves.push({\n      x: centerX + p.random(-200, 200),\n      y: centerY + p.random(-200, 200),\n      radius: 0,\n      speed: p.random(1, 3),\n      hue: p.random(240, 320),\n      intensity: p.random(0.3, 0.8)\n    });\n  }\n\n  p.draw = () => {\n    time += 0.02;\n    \n    // Dark background\n    p.background(270, 80, 5, 0.1);\n    \n    // Update and draw waves\n    updateWaves();\n    \n    // Update and draw particles\n    updateParticles();\n    \n    // Draw energy fields\n    drawEnergyFields();\n    \n    // Add new particles periodically\n    if (p.frameCount % 3 === 0) {\n      addParticle();\n    }\n    \n    // Add new waves periodically\n    if (p.frameCount % 60 === 0) {\n      addWave();\n    }\n  };\n\n  function updateWaves() {\n    waves = waves.filter(wave => {\n      wave.radius += wave.speed;\n      \n      p.push();\n      p.noFill();\n      p.strokeWeight(2);\n      p.stroke(wave.hue, 70, 80, wave.intensity * (1 - wave.radius / 400));\n      p.ellipse(wave.x, wave.y, wave.radius * 2);\n      p.pop();\n      \n      return wave.radius < 400;\n    });\n  }\n\n  function updateParticles() {\n    particles = particles.filter(particle => {\n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      \n      // Apply forces based on type\n      const angleToCenter = p.atan2(centerY - particle.y, centerX - particle.x);\n      \n      switch(particle.type) {\n        case 'anger':\n          // Explosive outward motion\n          particle.vx += p.cos(angleToCenter + p.PI) * 0.1;\n          particle.vy += p.sin(angleToCenter + p.PI) * 0.1;\n          break;\n        case 'growth':\n          // Spiral motion\n          const spiralAngle = angleToCenter + time;\n          particle.vx += p.cos(spiralAngle) * 0.05;\n          particle.vy += p.sin(spiralAngle) * 0.05;\n          break;\n        case 'poison':\n          // Sinuous, snake-like motion\n          particle.vx += p.cos(time * 2 + particle.x * 0.01) * 0.2;\n          particle.vy += p.sin(time * 2 + particle.y * 0.01) * 0.2;\n          break;\n      }\n      \n      // Decay life\n      particle.life -= 0.005;\n      \n      // Draw particle\n      p.push();\n      p.noStroke();\n      \n      // Draw glow\n      p.fill(particle.hue, 50, particle.brightness, particle.life * 0.3);\n      p.ellipse(particle.x, particle.y, particle.size * 3);\n      \n      // Draw core\n      p.fill(particle.hue, 80, particle.brightness, particle.life * 0.8);\n      p.ellipse(particle.x, particle.y, particle.size);\n      \n      p.pop();\n      \n      // Wrap around screen\n      if (particle.x < 0) particle.x = canvasWidth;\n      if (particle.x > canvasWidth) particle.x = 0;\n      if (particle.y < 0) particle.y = canvasHeight;\n      if (particle.y > canvasHeight) particle.y = 0;\n      \n      return particle.life > 0;\n    });\n  }\n\n  function drawEnergyFields() {\n    // Draw flowing energy lines\n    p.push();\n    p.noFill();\n    p.strokeWeight(1);\n    \n    for (let i = 0; i < 5; i++) {\n      p.stroke(280 + i * 10, 60, 70, 0.4);\n      \n      p.beginShape();\n      for (let x = 0; x <= canvasWidth; x += 20) {\n        const y = centerY + p.sin(x * 0.01 + time + i) * 100 + p.sin(x * 0.005 + time * 0.5) * 50;\n        p.curveVertex(x, y);\n      }\n      p.endShape();\n    }\n    \n    // Draw radial energy bursts\n    for (let i = 0; i < 12; i++) {\n      const angle = (i / 12) * p.TWO_PI + time * 0.5;\n      const length = 100 + p.sin(time * 2 + i) * 50;\n      const x1 = centerX + p.cos(angle) * 50;\n      const y1 = centerY + p.sin(angle) * 50;\n      const x2 = centerX + p.cos(angle) * length;\n      const y2 = centerY + p.sin(angle) * length;\n      \n      p.stroke(300, 70, 80, 0.5);\n      p.line(x1, y1, x2, y2);\n    }\n    \n    p.pop();\n  }\n\n  p.mousePressed = () => {\n    // Create burst of particles at mouse\n    for (let i = 0; i < 20; i++) {\n      const angle = p.random(p.TWO_PI);\n      const speed = p.random(3, 8);\n      \n      particles.push({\n        x: p.mouseX,\n        y: p.mouseY,\n        vx: p.cos(angle) * speed,\n        vy: p.sin(angle) * speed,\n        size: p.random(5, 15),\n        hue: p.random(0, 360),\n        brightness: p.random(80, 100),\n        life: 1.0,\n        type: 'anger'\n      });\n    }\n    \n    // Create wave at mouse\n    waves.push({\n      x: p.mouseX,\n      y: p.mouseY,\n      radius: 0,\n      speed: 3,\n      hue: p.random(270, 320),\n      intensity: 0.8\n    });\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    canvasWidth = p.width;\n    canvasHeight = p.height;\n    centerX = canvasWidth / 2;\n    centerY = canvasHeight / 2;\n  };\n};\n\nnew p5(sketch); "],"names":["sketch","p","particles","waves","time","canvasWidth","canvasHeight","centerX","centerY","i","addParticle","addWave","angle","distance","x","y","type","hue","speed","updateWaves","updateParticles","drawEnergyFields","wave","particle","angleToCenter","spiralAngle","length","x1","y1","x2","y2","p5"],"mappings":"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"}