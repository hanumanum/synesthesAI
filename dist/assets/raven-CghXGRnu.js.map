{"version":3,"file":"raven-CghXGRnu.js","sources":["../../src/sketches/raven.ts"],"sourcesContent":["import p5 from 'p5';\n\ninterface Particle {\n  position: p5.Vector;\n  velocity: p5.Vector;\n  acceleration: p5.Vector;\n  color: p5.Color;\n  size: number;\n  maxSpeed: number;\n  originalPosition: p5.Vector;\n  connectionRadius: number;\n  type: 'shadow' | 'ember' | 'raven' | 'curtain' | 'echo';\n  opacity: number;\n  targetOpacity: number;\n  phase: number;\n  life: number;\n  maxLife: number;\n}\n\nconst sketch = (p: p5) => {\n  let particles: Particle[] = [];\n  let time = 0;\n  let ravenPosition: p5.Vector;\n  let ravenSize = 0;\n  let ravenOpacity = 0;\n  let emberIntensity = 0;\n  let curtainWave = 0;\n  let echoTime = 0;\n  let lastEcho = 0;\n\n  const createParticle = (x: number, y: number, type: Particle['type']): Particle => {\n    const baseColor = type === 'shadow' ? p.color(15, 15, 25) :\n                     type === 'ember' ? p.color(180, 80, 40, 200) :\n                     type === 'raven' ? p.color(30, 30, 35) :\n                     type === 'echo' ? p.color(100, 100, 120, 150) :\n                     p.color(80, 40, 120);\n\n    return {\n      position: p.createVector(x, y),\n      velocity: p.createVector(0, 0),\n      acceleration: p.createVector(0, 0),\n      color: baseColor,\n      size: type === 'raven' ? 8 : \n            type === 'echo' ? p.random(3, 6) :\n            p.random(2, 4),\n      maxSpeed: type === 'raven' ? 1.5 : \n                type === 'echo' ? 2.5 :\n                p.random(1, 2.5),\n      originalPosition: p.createVector(x, y),\n      connectionRadius: p.random(40, 80),\n      type,\n      opacity: 0,\n      targetOpacity: type === 'echo' ? p.random(0.4, 0.6) :\n                    type === 'shadow' ? p.random(0.2, 0.4) :\n                    p.random(0.3, 0.7),\n      phase: p.random(p.TWO_PI),\n      life: 0,\n      maxLife: type === 'echo' ? p.random(100, 200) : Infinity\n    };\n  };\n\n  const createEcho = (x: number, y: number) => {\n    const count = p.random(5, 10);\n    for (let i = 0; i < count; i++) {\n      const angle = p.random(p.TWO_PI);\n      const distance = p.random(20, 50);\n      const echoX = x + p.cos(angle) * distance;\n      const echoY = y + p.sin(angle) * distance;\n      particles.push(createParticle(echoX, echoY, 'echo'));\n    }\n  };\n\n  p.setup = () => {\n    const container = document.getElementById('sketch-container');\n    if (!container) {\n      console.error('Sketch container not found');\n      return;\n    }\n\n    const canvas = p.createCanvas(container.clientWidth, container.clientHeight);\n    canvas.parent('sketch-container');\n    p.background(0);\n    \n    // Initialize particles\n    const particleCount = 400; // Increased particle count\n    ravenPosition = p.createVector(p.width * 0.7, p.height * 0.4);\n\n    // Create different types of particles\n    for (let i = 0; i < particleCount; i++) {\n      const type = i < particleCount * 0.35 ? 'shadow' :\n                  i < particleCount * 0.65 ? 'ember' :\n                  i < particleCount * 0.9 ? 'curtain' : 'raven';\n      \n      let x, y;\n      if (type === 'shadow') {\n        x = p.random(p.width * 0.5, p.width * 0.9);\n        y = p.random(p.height * 0.2, p.height * 0.8);\n      } else if (type === 'ember') {\n        x = p.random(p.width * 0.1, p.width * 0.3);\n        y = p.random(p.height * 0.6, p.height * 0.9);\n      } else if (type === 'curtain') {\n        x = p.random(p.width * 0.1, p.width * 0.2);\n        y = p.random(0, p.height);\n      } else {\n        x = ravenPosition.x + p.random(-15, 15);\n        y = ravenPosition.y + p.random(-15, 15);\n      }\n      \n      particles.push(createParticle(x, y, type));\n    }\n\n  };\n\n  p.draw = () => {\n\n    time += 0.01;\n    p.background(0, 0, 0, 0); // Removed background opacity for cleaner trails\n\n    // Update raven properties with smoother transitions\n    ravenSize = p.lerp(ravenSize, 1, 0.008);\n    ravenOpacity = p.lerp(ravenOpacity, 1, 0.003);\n    emberIntensity = p.sin(time * 1.5) * 0.5 + 0.5;\n    curtainWave = p.sin(time * 0.8) * 0.5 + 0.5;\n\n    // Create echo effect periodically\n    echoTime += 1;\n    if (echoTime - lastEcho > 180) { // Every 3 seconds at 60fps\n      createEcho(ravenPosition.x, ravenPosition.y);\n      lastEcho = echoTime;\n    }\n\n    // Update and draw particles\n    particles = particles.filter(particle => {\n      // Update particle life\n      if (particle.type === 'echo') {\n        particle.life += 1;\n        if (particle.life > particle.maxLife) return false;\n      }\n\n      // Apply forces based on particle type\n      if (particle.type === 'shadow') {\n        const noise = p.noise(particle.position.x * 0.005, particle.position.y * 0.005, time * 0.5) * p.TWO_PI;\n        particle.acceleration.x = p.cos(noise) * 0.03;\n        particle.acceleration.y = p.sin(noise) * 0.03;\n        particle.opacity = p.lerp(particle.opacity, particle.targetOpacity * 0.4, 0.015);\n      } else if (particle.type === 'ember') {\n        particle.acceleration.y = -0.25;\n        particle.acceleration.x = p.sin(time + particle.phase) * 0.12;\n        particle.opacity = p.lerp(particle.opacity, particle.targetOpacity * emberIntensity * 0.8, 0.06);\n      } else if (particle.type === 'curtain') {\n        particle.acceleration.x = p.sin(time * 1.5 + particle.phase) * 0.12;\n        particle.acceleration.y = p.cos(time * 0.8 + particle.phase) * 0.06;\n        particle.opacity = p.lerp(particle.opacity, particle.targetOpacity * curtainWave * 0.9, 0.02);\n      } else if (particle.type === 'raven') {\n        const toRaven = p5.Vector.sub(ravenPosition, particle.position);\n        const distance = toRaven.mag();\n        if (distance > 5) {\n          toRaven.normalize();\n          particle.acceleration.add(toRaven.mult(0.12));\n        }\n        particle.opacity = p.lerp(particle.opacity, particle.targetOpacity * ravenOpacity, 0.015);\n      } else if (particle.type === 'echo') {\n        const lifeRatio = 1 - (particle.life / particle.maxLife);\n        particle.opacity = particle.targetOpacity * lifeRatio;\n        particle.acceleration.y -= 0.02; // Slight upward drift\n        particle.acceleration.x += p.sin(time * 2 + particle.phase) * 0.05;\n      }\n\n      // Apply mouse force with more subtle effect\n      if (p.mouseX > 0 && p.mouseY > 0) {\n        const mousePos = p.createVector(p.mouseX, p.mouseY);\n        const force = p5.Vector.sub(particle.position, mousePos);\n        const distance = force.mag();\n        if (distance < 100) {\n          const strength = p.map(distance, 0, 100, 0.4, 0);\n          force.normalize();\n          force.mult(strength);\n          particle.acceleration.add(force);\n        }\n      }\n\n      // Update physics with improved damping\n      particle.velocity.add(particle.acceleration);\n      particle.velocity.mult(0.985); // Slightly increased damping\n      particle.velocity.limit(particle.maxSpeed);\n      particle.position.add(particle.velocity);\n      particle.acceleration.mult(0);\n\n      // Draw particle with enhanced visual effects\n      p.noStroke();\n      const alpha = particle.opacity * 255 * \n                   (particle.type === 'shadow' ? 0.8 : \n                    particle.type === 'echo' ? 0.9 : 1);\n      p.fill(p.red(particle.color), p.green(particle.color), p.blue(particle.color), alpha);\n      \n      // Draw particles with slight glow effect\n      if (particle.type === 'ember' || particle.type === 'echo') {\n        p.drawingContext.shadowBlur = 5;\n        p.drawingContext.shadowColor = p.color(p.red(particle.color), p.green(particle.color), p.blue(particle.color), alpha * 0.5);\n      }\n      \n      p.ellipse(particle.position.x, particle.position.y, particle.size * ravenSize);\n      p.drawingContext.shadowBlur = 0;\n\n      // Draw connections for shadow particles with improved aesthetics\n      if (particle.type === 'shadow') {\n        particles.forEach(other => {\n          if (other.type === 'shadow' && other !== particle) {\n            const distance = p5.Vector.dist(particle.position, other.position);\n            if (distance < particle.connectionRadius) {\n              const connectionOpacity = (1 - distance / particle.connectionRadius) * 25 * particle.opacity;\n              p.stroke(20, 20, 30, connectionOpacity);\n              p.line(particle.position.x, particle.position.y, other.position.x, other.position.y);\n            }\n          }\n        });\n      }\n\n      return true;\n    });\n  };\n\n  p.windowResized = () => {\n    const container = document.getElementById('sketch-container');\n    if (!container) return;\n\n    p.resizeCanvas(container.clientWidth, container.clientHeight);\n    ravenPosition = p.createVector(p.width * 0.7, p.height * 0.4);\n    \n    // Reset particles\n    particles = [];\n    p.setup();\n  };\n};\n\nnew p5(sketch); "],"names":["sketch","p","particles","time","ravenPosition","ravenSize","ravenOpacity","emberIntensity","curtainWave","echoTime","lastEcho","createParticle","x","y","type","baseColor","createEcho","count","i","angle","distance","echoX","echoY","container","particleCount","particle","noise","toRaven","p5","lifeRatio","mousePos","force","strength","alpha","other","connectionOpacity"],"mappings":"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"}