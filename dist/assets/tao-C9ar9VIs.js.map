{"version":3,"file":"tao-C9ar9VIs.js","sources":["../../src/sketches/tao.ts"],"sourcesContent":["import p5 from 'p5';\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  size: number;\n  color: p5.Color;\n  type: 'void' | 'form';\n  phase: number;\n  connectionStrength: number;\n}\n\ninterface Gate {\n  x: number;\n  y: number;\n  size: number;\n  rotation: number;\n  pulsePhase: number;\n}\n\nconst sketch = (p: p5) => {\n  let particles: Particle[] = [];\n  let gate: Gate;\n  let time = 0;\n  let isStormActive = false;\n  let stormPhase = 0;\n  let voidParticles: p5.Graphics;\n  let formParticles: p5.Graphics;\n  let centerX: number;\n  let centerY: number;\n  let canvasSize: number;\n\n  p.setup = () => {\n    const container = document.getElementById('sketch-container');\n    if (!container) {\n      console.error('Sketch container not found');\n      return;\n    }\n\n    const canvas = p.createCanvas(container.clientWidth, container.clientHeight);\n    canvas.parent('sketch-container');\n    p.colorMode(p.HSB, 360, 100, 100, 1);\n    \n    centerX = p.width / 2;\n    centerY = p.height / 2;\n    canvasSize = p.min(p.width, p.height);\n    \n    // Create off-screen buffers for void and form particles\n    voidParticles = p.createGraphics(p.width, p.height);\n    formParticles = p.createGraphics(p.width, p.height);\n    voidParticles.colorMode(p.HSB, 360, 100, 100, 1);\n    formParticles.colorMode(p.HSB, 360, 100, 100, 1);\n    \n    // Initialize gate\n    gate = {\n      x: centerX,\n      y: centerY,\n      size: canvasSize * 0.3,\n      rotation: 0,\n      pulsePhase: 0\n    };\n    \n    // Initialize particles\n    initializeParticles();\n    \n    p.background(0, 0, 5);\n  };\n\n  function initializeParticles() {\n    particles = [];\n    const particleCount = 100;\n    \n    for (let i = 0; i < particleCount; i++) {\n      const angle = (i / particleCount) * p.TWO_PI;\n      const radius = p.random(canvasSize * 0.1, canvasSize * 0.4);\n      const x = centerX + p.cos(angle) * radius;\n      const y = centerY + p.sin(angle) * radius;\n      \n      const type = i % 2 === 0 ? 'void' : 'form';\n      const hue = type === 'void' ? 240 : 60;  // Blue for void, yellow for form\n      \n      particles.push({\n        x,\n        y,\n        vx: 0,\n        vy: 0,\n        size: p.random(2, 6),\n        color: p.color(hue, 70, 90, 0.6),\n        type,\n        phase: p.random(p.TWO_PI),\n        connectionStrength: p.random(0.3, 0.7)\n      });\n    }\n  }\n\n  p.draw = () => {\n    time += 0.01;\n    gate.pulsePhase += 0.02;\n    gate.rotation += 0.001;\n    \n    // Update background with subtle gradient\n    p.background(0, 0, 5);\n    drawBackground();\n    \n    // Update and draw particles\n    updateParticles();\n    drawParticles();\n    \n    // Draw the gate\n    drawGate();\n    \n    // Draw connections between particles\n    drawConnections();\n    \n    // Handle storm effect\n    if (isStormActive) {\n      updateStorm();\n    }\n  };\n\n  function drawBackground() {\n    const gradient = p.drawingContext.createRadialGradient(\n      centerX, centerY, 0,\n      centerX, centerY, canvasSize * 0.8\n    );\n    \n    gradient.addColorStop(0, p.color(240, 30, 10, 0.3));\n    gradient.addColorStop(0.5, p.color(240, 20, 5, 0.1));\n    gradient.addColorStop(1, p.color(240, 10, 5, 0));\n    \n    p.drawingContext.fillStyle = gradient;\n    p.drawingContext.fillRect(0, 0, p.width, p.height);\n  }\n\n  function updateParticles() {\n    particles.forEach(particle => {\n      // Calculate distance from center\n      const dx = particle.x - centerX;\n      const dy = particle.y - centerY;\n      const dist = p.sqrt(dx * dx + dy * dy);\n      \n      // Create orbital motion\n      const angle = p.atan2(dy, dx);\n      const targetDist = canvasSize * (0.2 + p.sin(time + particle.phase) * 0.1);\n      const force = (targetDist - dist) * 0.001;\n      \n      particle.vx += p.cos(angle) * force;\n      particle.vy += p.sin(angle) * force;\n      \n      // Add some randomness\n      particle.vx += p.random(-0.1, 0.1);\n      particle.vy += p.random(-0.1, 0.1);\n      \n      // Apply friction\n      particle.vx *= 0.98;\n      particle.vy *= 0.98;\n      \n      // Update position\n      particle.x += particle.vx;\n      particle.y += particle.vy;\n      \n      // Update color based on type and phase\n      const hue = particle.type === 'void' ? 240 : 60;\n      const saturation = 70 + p.sin(time + particle.phase) * 20;\n      const brightness = 80 + p.sin(time * 1.5 + particle.phase) * 10;\n      particle.color = p.color(hue, saturation, brightness, 0.6);\n    });\n  }\n\n  function drawParticles() {\n    // Clear buffers\n    voidParticles.clear();\n    formParticles.clear();\n    \n    // Draw particles to their respective buffers\n    particles.forEach(particle => {\n      const buffer = particle.type === 'void' ? voidParticles : formParticles;\n      buffer.push();\n      buffer.translate(particle.x, particle.y);\n      buffer.rotate(time + particle.phase);\n      \n      // Draw particle with glow effect\n      buffer.noStroke();\n      for (let i = 3; i > 0; i--) {\n        const alpha = 0.2 / i;\n        buffer.fill(particle.type === 'void' ? 240 : 60, 70, 90, alpha);\n        buffer.ellipse(0, 0, particle.size * i * 2);\n      }\n      \n      buffer.pop();\n    });\n    \n    // Draw buffers to main canvas\n    p.blendMode(p.ADD);\n    p.image(voidParticles, 0, 0);\n    p.image(formParticles, 0, 0);\n    p.blendMode(p.BLEND);\n  }\n\n  function drawGate() {\n    p.push();\n    p.translate(gate.x, gate.y);\n    p.rotate(gate.rotation);\n    \n    // Draw outer ring\n    p.noFill();\n    p.stroke(240, 50, 90, 0.3);\n    p.strokeWeight(2);\n    p.ellipse(0, 0, gate.size * 2);\n    \n    // Draw inner structure\n    const pulse = p.sin(gate.pulsePhase) * 0.1 + 0.9;\n    p.stroke(240, 70, 90, 0.5);\n    p.strokeWeight(3);\n    \n    // Draw the gate's structure\n    for (let i = 0; i < 8; i++) {\n      const angle = (i / 8) * p.TWO_PI;\n      const x1 = p.cos(angle) * gate.size * 0.3;\n      const y1 = p.sin(angle) * gate.size * 0.3;\n      const x2 = p.cos(angle) * gate.size * pulse;\n      const y2 = p.sin(angle) * gate.size * pulse;\n      \n      p.line(x1, y1, x2, y2);\n    }\n    \n    // Draw connecting arcs\n    p.stroke(240, 50, 90, 0.3);\n    for (let i = 0; i < 4; i++) {\n      const angle = (i / 4) * p.TWO_PI;\n      p.arc(0, 0, gate.size * 1.5, gate.size * 1.5, \n            angle, angle + p.PI/2);\n    }\n    \n    p.pop();\n  }\n\n  function drawConnections() {\n    p.stroke(240, 30, 90, 0.1);\n    p.strokeWeight(1);\n    \n    for (let i = 0; i < particles.length; i++) {\n      for (let j = i + 1; j < particles.length; j++) {\n        const p1 = particles[i];\n        const p2 = particles[j];\n        \n        // Only connect particles of different types\n        if (p1.type !== p2.type) {\n          const dx = p1.x - p2.x;\n          const dy = p1.y - p2.y;\n          const dist = p.sqrt(dx * dx + dy * dy);\n          \n          if (dist < canvasSize * 0.2) {\n            const strength = (1 - dist / (canvasSize * 0.2)) * \n                           p1.connectionStrength * p2.connectionStrength;\n            p.stroke(240, 30, 90, strength * 0.2);\n            p.line(p1.x, p1.y, p2.x, p2.y);\n          }\n        }\n      }\n    }\n  }\n\n  function updateStorm() {\n    stormPhase += 0.1;\n    \n    // Add turbulence to particles\n    particles.forEach(particle => {\n      const angle = p.noise(particle.x * 0.01, particle.y * 0.01, stormPhase) * p.TWO_PI;\n      const force = p.noise(particle.x * 0.02, particle.y * 0.02, stormPhase) * 2;\n      \n      particle.vx += p.cos(angle) * force;\n      particle.vy += p.sin(angle) * force;\n    });\n    \n    // Gradually decrease storm intensity\n    if (p.frameCount % 60 === 0) {\n      isStormActive = false;\n    }\n  }\n\n  p.mousePressed = () => {\n    // Toggle storm effect\n    isStormActive = true;\n    stormPhase = 0;\n  };\n\n  p.windowResized = () => {\n    p.resizeCanvas(p.windowWidth, p.windowHeight);\n    centerX = p.width / 2;\n    centerY = p.height / 2;\n    canvasSize = p.min(p.width, p.height);\n    \n    // Resize buffers\n    voidParticles.resizeCanvas(p.width, p.height);\n    formParticles.resizeCanvas(p.width, p.height);\n    \n    // Update gate size\n    gate.size = canvasSize * 0.3;\n    \n    // Reinitialize particles\n    initializeParticles();\n  };\n};\n\n\nnew p5(sketch); "],"names":["sketch","p","particles","gate","time","isStormActive","stormPhase","voidParticles","formParticles","centerX","centerY","canvasSize","container","initializeParticles","particleCount","i","angle","radius","x","y","type","hue","drawBackground","updateParticles","drawParticles","drawGate","drawConnections","updateStorm","gradient","particle","dx","dy","dist","force","saturation","brightness","buffer","alpha","pulse","x1","y1","x2","y2","j","p1","p2","strength","p5"],"mappings":"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"}